/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's profile
         * @description Retrieves the profile of the authenticated user based on the current session.
         */
        get: operations["getCurrentUser"];
        /**
         * Update current user's profile
         * @description Updates the profile of the authenticated user based on the provided data.
         */
        put: operations["updateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/{organisationId}/member/role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateMemberRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateOrganisation"];
        post: operations["createOrganisation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/item/{lineItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a line item by ID
         * @description Retrieves a specific line item by its ID, if the user has access.
         */
        get: operations["getLineItemById"];
        /**
         * Update an existing line item
         * @description Updates a line item with the specified ID, if the user has access.
         */
        put: operations["updateLineItem"];
        post?: never;
        /**
         * Delete a line item by ID
         * @description Deletes a line item with the specified ID, if the user has access.
         */
        delete: operations["deleteLineItemById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an invoice by ID
         * @description Retrieves a specific invoice by its ID, if the user has access.
         */
        get: operations["getInvoiceById"];
        /**
         * Update an existing invoice
         * @description Updates an invoice with the specified ID, if the user has access.
         */
        put: operations["updateInvoice"];
        post?: never;
        /**
         * Delete an invoice
         * @description Deletes an invoice with the specified ID, if the user has access and the invoice is not paid or cancelled.
         */
        delete: operations["deleteInvoice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a client by ID
         * @description Retrieves a specific client by its ID, if the user has access.
         */
        get: operations["getClientById"];
        /**
         * Update an existing client
         * @description Updates a client with the specified ID, if the user has access.
         */
        put: operations["updateClient"];
        post?: never;
        /**
         * Delete a client by ID
         * @description Deletes a client with the specified ID, if the user has access.
         */
        delete: operations["deleteClientById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientId}/archive/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates the archival status of a client
         * @description Archives or unarchives a client based on the provided status, if the user has access.
         */
        put: operations["updateArchiveStatusByClientId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/{blockId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a block tree
         * @description Retrieves a block tree by its ID, fetching all associated children
         */
        get: operations["getBlock"];
        /**
         * Update an existing block
         * @description Updates a block by ID. Validates and merges payload according to the block type's validation settings.
         */
        put: operations["updateBlock"];
        post?: never;
        /**
         * Delete a block
         * @description Deletes a block by ID. This operation will then also remove all child blocks recursively.
         */
        delete: operations["deleteBlockById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/{blockId}/archive/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update archival status of a block
         * @description Archives or unarchives a block. The request must include the full block payload to ensure authorisation and validation are correctly scoped.
         */
        put: operations["updateArchiveStatusByBlockId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/{blockTypeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing block type
         * @description Updates a block type with the specified ID. Does not allow changing the scope of the block type.
         */
        put: operations["updateBlockType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/{blockTypeId}/archive/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Archive a block type
         * @description Archives a block type by its ID. The block type will still be visible to users currently using it but cannot be used in new blocks.
         */
        put: operations["updateArchiveStatusByBlockTypeId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/reference/{id}/refs:links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update entity reference list
         * @description Performs delta-upsert on a reference block's entity list. Adds new references, updates positions, and removes entries not in the new list. Honors allowDuplicates policy. Rejects type=BLOCK (use refs:block endpoint for block references).
         */
        put: operations["upsertEntityReferences"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/reference/{id}/refs:block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update single block reference
         * @description Updates which block is referenced by a BlockReferenceMetadata block. Ensures exactly one reference row exists. The referenced item must have type=BLOCK.
         */
        put: operations["upsertBlockReference"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/reject/{inviteToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["rejectInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/organisation/{organisationId}/email/{email}/role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["inviteToOrganisation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/accept/{inviteToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["acceptInvite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/item/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new line item
         * @description Creates a new line item based on the provided request data.
         */
        post: operations["createLineItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an invoice
         * @description Cancels an invoice with the specified ID, if the user has access and the invoice is not paid or already cancelled.
         */
        post: operations["cancelInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all invoices for them provided organisation
         * @description Retrieves a list of invoices associated with the provided organisation
         */
        get: operations["getUserInvoices"];
        put?: never;
        /**
         * Create a new invoice
         * @description Creates a new invoice based on the provided request data.
         */
        post: operations["createInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new client
         * @description Creates a new client based on the provided request data.
         */
        post: operations["createClient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/lint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Lint a block type
         * @description Validates the schema and configuration of a block type to ensure it adheres to defined standards.
         */
        post: operations["lintBlockType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new block type
         * @description Creates and publishes a new block type based on the provided request data.
         */
        post: operations["publishBlockType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/child/{parentId}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a child block to a parent
         * @description Creates a parent-child relationship by adding a block to a parent's slot. Validates organisation ownership, slot compatibility, and type nesting rules. Rejects cycles and enforces child_id uniqueness (a block can only have one parent).
         */
        post: operations["addChild"];
        /**
         * Clear all children from a slot
         * @description Removes all children from the specified slot. Child blocks remain in the system as top-level blocks. This is a bulk detachment operation.
         */
        delete: operations["clearSlot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/child/{parentId}/children:bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add multiple children to a parent slot
         * @description Bulk operation to add multiple blocks to a parent's slot. The service normalizes order indices to 0..n-1. All children must pass the same validation as single child addition.
         */
        post: operations["addChildrenBulk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new block
         * @description Creates a new block using the provided request details and validates payload when required.
         */
        post: operations["createBlock"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/child/{parentId}/children/{childId}/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Move a child block internally to a different position or slot
         * @description Moves a child block within the same parent. Can reorder within same slot or move to a different slot. Source slot is inferred from current edge. Renumbers both affected slots automatically.
         */
        patch: operations["moveChild"];
        trace?: never;
    };
    "/api/v1/block/child/{parentId}/children/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reorder children within a single slot
         * @description Reorders all children in a slot according to the provided order list. Validates set equality (all existing children must be in the order list). Normalizes indices to 0..n-1.
         */
        patch: operations["reorderChildren"];
        trace?: never;
    };
    "/api/v1/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user by ID
         * @description Retrieves a specific user's profile by their ID, if the user has access.
         */
        get: operations["getUserById"];
        put?: never;
        post?: never;
        /**
         * Delete a user profile by ID
         * @description Deletes a user profile with the specified ID, if the user has access.
         */
        delete: operations["deleteUserProfileById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrganisation"];
        put?: never;
        post?: never;
        delete: operations["deleteOrganisation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserInvites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrganisationInvites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/item/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all line items for an organisation
         * @description Retrieves a list of line items associated with a given organisation.
         */
        get: operations["getLineItemsForOrganisation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate invoice document
         * @description Generates a PDF document for the invoice with the specified ID, if the user has access.
         */
        get: operations["generateInvoiceDocument"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices for a specific client
         * @description Retrieves a list of invoices for the specified client, if the user has access.
         */
        get: operations["getClientInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all clients for the organisation
         * @description Retrieves a list of clients for a given organisation. Given the user is authenticated, and belongs to that specified organisation
         */
        get: operations["getOrganisationClients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/organisation/{organisationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block types for organisation
         * @description Retrieves all block types associated with a specific organisation.
         */
        get: operations["getBlockTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/schema/key/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get block type by key
         * @description Retrieves a block type by its unique key.
         */
        get: operations["getBlockTypeByKey"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/reference/{id}/refs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get resolved references for a block
         * @description Retrieves and optionally resolves references for a reference block. Returns different response types based on the block's metadata type: EntityReferenceMetadata returns a list, BlockReferenceMetadata returns a single reference. LAZY mode returns IDs only, EAGER mode resolves entities via configured resolvers.
         */
        get: operations["getReferences"];
        put?: never;
        post?: never;
        /**
         * Clear all references from a block
         * @description Removes all reference entries for the specified block. The block itself is not deleted, only its reference relationships are cleared.
         */
        delete: operations["clearAllReferences"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/{organisationId}/member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["removeMemberFromOrganisation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/organisation/invite/organisation/{organisationId}/invitation/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["revokeInvite"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/reference/{id}/refs/{entityType}/{entityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a single reference
         * @description Removes a specific reference entry by entity type and ID. For reference lists with allowDuplicates=true, include the path parameter to specify which occurrence to remove (e.g., ?path=$.items[3]).
         */
        delete: operations["removeReference"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/block/child/{parentId}/children/{childId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a child from a parent
         * @description Removes the parent-child relationship without deleting the child block. The child block remains in the system as a top-level block. Automatically renumbers remaining children in the affected slot.
         */
        delete: operations["removeChild"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            street: string;
            city: string;
            state: string;
            postalCode: string;
            country: string;
        };
        MembershipDetails: {
            organisation?: components["schemas"]["Organisation"];
            /** @enum {string} */
            role: "OWNER" | "ADMIN" | "MEMBER";
            /** Format: date-time */
            memberSince: string;
        };
        Organisation: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "organisation";
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            plan: "FREE" | "STARTUP" | "SCALE" | "ENTERPRISE";
            defaultCurrency: {
                currencyCode?: string;
                /** Format: int32 */
                numericCode?: number;
                numericCodeAsString?: string;
                displayName?: string;
                symbol?: string;
                /** Format: int32 */
                defaultFractionDigits?: number;
            };
            avatarUrl?: string;
            businessNumber?: string;
            taxId?: string;
            address?: components["schemas"]["Address"];
            organisationPaymentDetails?: components["schemas"]["OrganisationPaymentDetails"];
            /** Format: int32 */
            memberCount: number;
            /** Format: date-time */
            createdAt?: string;
            members: components["schemas"]["OrganisationMember"][];
            invites: components["schemas"]["OrganisationInvite"][];
        };
        OrganisationInvite: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            organisationId: string;
            email: string;
            inviteToken: string;
            /** Format: uuid */
            invitedBy?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt: string;
            /** @enum {string} */
            role: "OWNER" | "ADMIN" | "MEMBER";
            /** @enum {string} */
            status: "PENDING" | "ACCEPTED" | "DECLINED" | "EXPIRED";
        };
        OrganisationMember: {
            user: components["schemas"]["UserDisplay"];
            membershipDetails: components["schemas"]["MembershipDetails"];
        };
        OrganisationPaymentDetails: {
            bsb?: string;
            accountNumber?: string;
            accountName?: string;
        };
        User: {
            /** Format: uuid */
            id: string;
            email: string;
            name: string;
            phone?: string;
            avatarUrl?: string;
            memberships: components["schemas"]["MembershipDetails"][];
            defaultOrganisation?: components["schemas"]["Organisation"];
        };
        UserDisplay: {
            /** Format: uuid */
            id: string;
            email: string;
            name: string;
            avatarUrl?: string;
        };
        LineItem: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: uuid */
            organisationId: string;
            description?: string;
            /** @enum {string} */
            type: "SERVICE" | "PRODUCT" | "FEE" | "DISCOUNT";
            chargeRate: number;
        };
        Billable: {
            /** Format: date-time */
            date: string;
            description: string;
            lineItem: components["schemas"]["LineItem"];
            /** @enum {string} */
            billableType: "HOURS" | "DISTANCE" | "QUANTITY" | "FIXED";
            quantity: number;
        };
        BindingSource: {
            type: string;
        };
        Block: {
            /** Format: uuid */
            id: string;
            name?: string;
            /** Format: uuid */
            organisationId: string;
            type: components["schemas"]["BlockType"];
            layout?: components["schemas"]["GridRect"];
            payload: components["schemas"]["EntityReferenceMetadata"] | components["schemas"]["BlockReferenceMetadata"] | components["schemas"]["BlockContentMetadata"];
            archived: boolean;
            validationErrors?: string[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
        };
        BlockBinding: {
            prop: string;
            source: components["schemas"]["Computed"] | components["schemas"]["DataPath"] | components["schemas"]["RefSlot"];
        };
        BlockComponentNode: {
            id: string;
            /** @enum {string} */
            type: "CONTACT_CARD" | "LAYOUT_CONTAINER" | "ADDRESS_CARD" | "LINE_ITEM" | "TABLE" | "TEXT" | "IMAGE" | "BUTTON" | "ATTACHMENT";
            props: {
                [key: string]: unknown;
            };
            bindings: components["schemas"]["BlockBinding"][];
            slots?: {
                [key: string]: string[];
            };
            slotLayout?: {
                [key: string]: components["schemas"]["LayoutGrid"];
            };
            widgetMeta?: {
                [key: string]: Record<string, never>;
            };
            visible?: components["schemas"]["Condition"];
            /** @enum {string} */
            fetchPolicy: "INHERIT" | "LAZY" | "EAGER";
        };
        BlockContentMetadata: WithRequired<components["schemas"]["Metadata"], "meta" | "type"> & {
            data: {
                [key: string]: unknown;
            };
        };
        BlockDisplay: {
            form: components["schemas"]["BlockFormStructure"];
            render: components["schemas"]["BlockRenderStructure"];
        };
        BlockFormStructure: {
            fields: {
                [key: string]: components["schemas"]["FormWidgetConfig"];
            };
        };
        BlockMeta: {
            validationErrors: string[];
            computedFields?: {
                [key: string]: unknown;
            };
            /** Format: int32 */
            lastValidatedVersion?: number;
        };
        BlockReferenceMetadata: WithRequired<components["schemas"]["Metadata"], "meta" | "type"> & {
            /** @enum {string} */
            fetchPolicy: "LAZY" | "EAGER";
            path: string;
            /** Format: int32 */
            expandDepth: number;
            item: components["schemas"]["ReferenceItem"];
        };
        BlockRenderStructure: {
            /** Format: int32 */
            version: number;
            layoutGrid: components["schemas"]["LayoutGrid"];
            components: {
                [key: string]: components["schemas"]["BlockComponentNode"];
            };
            theme?: components["schemas"]["ThemeTokens"];
        };
        BlockSchema: {
            name: string;
            description?: string;
            /** @enum {string} */
            type: "STRING" | "NUMBER" | "BOOLEAN" | "OBJECT" | "ARRAY" | "NULL";
            /** @enum {string} */
            format?: "DATE" | "DATETIME" | "EMAIL" | "PHONE" | "CURRENCY" | "URL" | "PERCENTAGE";
            required: boolean;
            properties?: {
                [key: string]: components["schemas"]["BlockSchema"];
            };
            items?: components["schemas"]["BlockSchema"];
        };
        BlockTree: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "block_tree";
            root: components["schemas"]["ContentNode"] | components["schemas"]["ReferenceNode"];
        };
        BlockTreeReference: WithRequired<components["schemas"]["ReferencePayload"], "type"> & {
            reference: components["schemas"]["Reference"];
        };
        BlockType: {
            /** Format: uuid */
            id: string;
            key: string;
            /** Format: int32 */
            version: number;
            name: string;
            /** Format: uuid */
            sourceId?: string;
            nesting?: components["schemas"]["BlockTypeNesting"];
            description?: string;
            /** Format: uuid */
            organisationId?: string;
            archived: boolean;
            /** @enum {string} */
            strictness: "SOFT" | "STRICT" | "NONE";
            system: boolean;
            schema: components["schemas"]["BlockSchema"];
            display: components["schemas"]["BlockDisplay"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
        };
        BlockTypeNesting: {
            /** Format: int32 */
            max?: number;
            allowedTypes: ("CONTACT_CARD" | "LAYOUT_CONTAINER" | "ADDRESS_CARD" | "LINE_ITEM" | "TABLE" | "TEXT" | "IMAGE" | "BUTTON" | "ATTACHMENT")[];
        };
        Client: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "client";
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            organisationId: string;
            name: string;
            contact: components["schemas"]["Contact"];
            /** @enum {string} */
            clientType?: "PROSPECT" | "CUSTOMER" | "SUBSCRIBER" | "SERVICE" | "ENTERPRISE" | "PARTNER" | "VENDOR" | "DORMANT" | "TRIAL" | "CHURNED" | "INFLUENCER" | "OTHER";
            company?: components["schemas"]["Company"];
            role?: string;
            archived: boolean;
            metadata?: components["schemas"]["ClientTypeMetadata"];
            attributes?: {
                [key: string]: components["schemas"]["BlockTree"];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
        };
        ClientTypeMetadata: {
            /** @enum {string} */
            type: "PROSPECT" | "CUSTOMER" | "SUBSCRIBER" | "SERVICE" | "ENTERPRISE" | "PARTNER" | "VENDOR" | "DORMANT" | "TRIAL" | "CHURNED" | "INFLUENCER" | "OTHER";
            metadata: {
                [key: string]: components["schemas"]["Block"];
            };
        };
        Company: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            organisationId: string;
            name: string;
            address?: components["schemas"]["Address"];
            phone?: string;
            email?: string;
            website?: string;
            businessNumber?: string;
            logoUrl?: string;
            archived: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            createdBy?: string;
            /** Format: uuid */
            updatedBy?: string;
        };
        Computed: {
            type: "Computed";
        } & (Omit<components["schemas"]["BindingSource"], "type"> & {
            expr: string;
            engine: string;
        });
        Condition: {
            /** @enum {string} */
            op: "EXISTS" | "EQUALS" | "NOT_EQUALS" | "GT" | "GTE" | "LT" | "LTE" | "IN" | "NOT_IN" | "EMPTY" | "NOT_EMPTY";
            left: components["schemas"]["Path"] | components["schemas"]["Value"];
            right?: components["schemas"]["Path"] | components["schemas"]["Value"];
        };
        Contact: {
            email: string;
            phone?: string;
            address?: components["schemas"]["Address"];
            additionalContacts?: {
                [key: string]: string;
            };
        };
        ContentNode: WithRequired<components["schemas"]["Node"], "block" | "type" | "warnings"> & {
            children?: {
                [key: string]: components["schemas"]["Node"][];
            };
        };
        DataPath: {
            type: "DataPath";
        } & (Omit<components["schemas"]["BindingSource"], "type"> & {
            path: string;
        });
        EntityReference: WithRequired<components["schemas"]["ReferencePayload"], "type"> & {
            reference: components["schemas"]["Reference"][];
        };
        EntityReferenceMetadata: WithRequired<components["schemas"]["Metadata"], "meta" | "type"> & {
            /** @enum {string} */
            fetchPolicy: "LAZY" | "EAGER";
            path: string;
            items: components["schemas"]["ReferenceItem"][];
            /** @enum {string} */
            presentation: "SUMMARY" | "ENTITY" | "TABLE" | "GRID";
            projection?: components["schemas"]["Projection"];
            sort?: components["schemas"]["SortSpec"];
            filter?: components["schemas"]["FilterSpec"];
            paging?: components["schemas"]["PagingSpec"];
            allowDuplicates: boolean;
        };
        FilterSpec: {
            expr: {
                [key: string]: unknown;
            };
        };
        FormWidgetConfig: {
            /** @enum {string} */
            type: "TEXT_INPUT" | "NUMBER_INPUT" | "CHECKBOX" | "RADIO_BUTTON" | "DROPDOWN" | "DATE_PICKER" | "EMAIL_INPUT" | "PHONE_INPUT" | "CURRENCY_INPUT" | "TEXT_AREA" | "FILE_UPLOAD" | "SLIDER" | "TOGGLE_SWITCH";
            label: string;
            description?: string;
            tooltip?: string;
            placeholder?: string;
            options?: components["schemas"]["Option"][];
        };
        GridItem: {
            id: string;
            sm?: components["schemas"]["GridRect"];
            md?: components["schemas"]["GridRect"];
            lg: components["schemas"]["GridRect"];
        };
        GridRect: {
            /** Format: int32 */
            x: number;
            /** Format: int32 */
            y: number;
            /** Format: int32 */
            margin?: number;
            /** Format: int32 */
            width: number;
            /** Format: int32 */
            height: number;
            locked: boolean;
        };
        Invoice: {
            /** Format: uuid */
            id: string;
            organisation: components["schemas"]["Organisation"];
            client: components["schemas"]["Client"];
            template?: components["schemas"]["TemplateInvoiceTemplateFieldStructure"];
            reportTemplate?: components["schemas"]["TemplateReportTemplateFieldStructure"];
            invoiceNumber: string;
            items: components["schemas"]["Billable"][];
            amount: number;
            currency: {
                currencyCode?: string;
                /** Format: int32 */
                numericCode?: number;
                numericCodeAsString?: string;
                displayName?: string;
                symbol?: string;
                /** Format: int32 */
                defaultFractionDigits?: number;
            };
            /** @enum {string} */
            status: "PENDING" | "PAID" | "OVERDUE" | "OUTDATED" | "CANCELLED";
            dates: components["schemas"]["InvoiceDates"];
            customFields: {
                [key: string]: Record<string, never>;
            };
        };
        InvoiceDates: {
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            issueDate: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            invoiceCreatedAt?: string;
            /** Format: date-time */
            invoiceUpdatedAt?: string;
        };
        InvoiceTemplateFieldStructure: {
            name: string;
            description?: string;
            type: string;
            required: boolean;
            children: components["schemas"]["InvoiceTemplateFieldStructure"][];
        };
        LayoutGrid: {
            layout: components["schemas"]["GridRect"];
            items: components["schemas"]["GridItem"][];
        };
        Metadata: {
            /** @enum {string} */
            type: "content" | "entity_reference" | "block_reference";
            meta: components["schemas"]["BlockMeta"];
        };
        Node: {
            warnings: string[];
            /** @enum {string} */
            type: "reference_node" | "content_node";
            block: components["schemas"]["Block"];
        };
        Operand: {
            kind: string;
        };
        Option: {
            label: string;
            value: string;
        };
        PagingSpec: {
            /** Format: int32 */
            pageSize: number;
        };
        Path: {
            kind: "Path";
        } & (Omit<components["schemas"]["Operand"], "kind"> & {
            path: string;
        });
        Projection: {
            fields: string[];
            /** Format: uuid */
            templateId?: string;
        };
        RefSlot: {
            type: "RefSlot";
        } & (Omit<components["schemas"]["BindingSource"], "type"> & {
            slot: string;
            /** @enum {string} */
            presentation: "SUMMARY" | "INLINE";
            fields?: string[];
            /** Format: int32 */
            expandDepth?: number;
        });
        Reference: {
            /** Format: uuid */
            id?: string;
            /** @enum {string} */
            entityType: "line_item" | "client" | "company" | "invoice" | "block_tree" | "report" | "document" | "project" | "organisation" | "task";
            /** Format: uuid */
            entityId: string;
            path?: string;
            /** Format: int32 */
            orderIndex?: number;
            /** @description Inline, discriminated entity */
            entity?: components["schemas"]["Referenceable"];
            /** @enum {string} */
            warning?: "MISSING" | "REQUIRES_LOADING" | "UNSUPPORTED" | "CIRCULAR" | "DEPTH_EXCEEDED";
        };
        ReferenceItem: {
            /** @enum {string} */
            type: "line_item" | "client" | "company" | "invoice" | "block_tree" | "report" | "document" | "project" | "organisation" | "task";
            /** Format: uuid */
            id: string;
            labelOverride?: string;
            badge?: string;
        };
        ReferenceNode: WithRequired<components["schemas"]["Node"], "block" | "type" | "warnings"> & {
            reference: components["schemas"]["EntityReference"] | components["schemas"]["BlockTreeReference"];
        };
        ReferencePayload: {
            /** @enum {string} */
            type: "block_reference" | "entity_reference";
        };
        Referenceable: {
            /** @enum {string} */
            type: "line_item" | "client" | "company" | "invoice" | "block_tree" | "report" | "document" | "project" | "organisation" | "task";
        } & (components["schemas"]["Client"] | components["schemas"]["Organisation"] | components["schemas"]["BlockTree"]);
        ReportTemplateFieldStructure: {
            name: string;
            description?: string;
            type: string;
            required: boolean;
            children: components["schemas"]["ReportTemplateFieldStructure"][];
        };
        SortSpec: {
            by: string;
            /** @enum {string} */
            dir: "ASC" | "DESC";
        };
        TemplateInvoiceTemplateFieldStructure: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId?: string;
            name: string;
            description?: string;
            /** @enum {string} */
            type: "CLIENT" | "INVOICE" | "REPORT";
            structure: {
                [key: string]: components["schemas"]["InvoiceTemplateFieldStructure"];
            };
            isDefault: boolean;
            isPremade: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TemplateReportTemplateFieldStructure: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId?: string;
            name: string;
            description?: string;
            /** @enum {string} */
            type: "CLIENT" | "INVOICE" | "REPORT";
            structure: {
                [key: string]: components["schemas"]["ReportTemplateFieldStructure"];
            };
            isDefault: boolean;
            isPremade: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ThemeTokens: {
            variant?: string;
            colorRole?: string;
            tone?: string;
        };
        Value: {
            kind: "Value";
        } & (Omit<components["schemas"]["Operand"], "kind"> & {
            value?: Record<string, never>;
        });
        UpsertEntityReferencesRequest: {
            items: components["schemas"]["ReferenceItem"][];
            pathPrefix?: string;
        };
        UpsertBlockReferenceRequest: {
            item: components["schemas"]["ReferenceItem"];
            path?: string;
        };
        OrganisationCreationRequest: {
            name: string;
            avatarUrl?: string;
            /** @enum {string} */
            plan: "FREE" | "STARTUP" | "SCALE" | "ENTERPRISE";
            defaultCurrency: string;
            isDefault: boolean;
            businessNumber?: string;
            taxId?: string;
            address: components["schemas"]["Address"];
            payment?: components["schemas"]["OrganisationPaymentDetails"];
            customAttributes: {
                [key: string]: Record<string, never>;
            };
        };
        LineItemCreationRequest: {
            name: string;
            /** Format: uuid */
            organisationId: string;
            description?: string;
            chargeRate: number;
        };
        InvoiceCreationRequest: {
            /** Format: uuid */
            clientId: string;
            /** Format: uuid */
            organisationId: string;
            template: components["schemas"]["TemplateInvoiceTemplateFieldStructure"];
            reportTemplate?: components["schemas"]["TemplateReportTemplateFieldStructure"];
            invoiceNumber: string;
            items: components["schemas"]["Billable"][];
            amount: number;
            currency: {
                currencyCode?: string;
                /** Format: int32 */
                numericCode?: number;
                numericCodeAsString?: string;
                displayName?: string;
                symbol?: string;
                /** Format: int32 */
                defaultFractionDigits?: number;
            };
            /** @enum {string} */
            status: "PENDING" | "PAID" | "OVERDUE" | "OUTDATED" | "CANCELLED";
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            issueDate: string;
            customFields: {
                [key: string]: Record<string, never>;
            };
        };
        ClientCreationRequest: {
            name: string;
            /** Format: uuid */
            organisationId: string;
            /** Format: uuid */
            companyId?: string;
            companyRole?: string;
            contact: components["schemas"]["Contact"];
        };
        LintIssue: {
            path: string;
            /** @enum {string} */
            level: "INFO" | "WARNING" | "ERROR";
            message: string;
        };
        CreateBlockTypeRequest: {
            key: string;
            name: string;
            description?: string;
            /** @enum {string} */
            mode: "SOFT" | "STRICT" | "NONE";
            schema: components["schemas"]["BlockSchema"];
            display: components["schemas"]["BlockDisplay"];
            /** Format: uuid */
            organisationId: string;
        };
        AddChildRequest: {
            /** Format: uuid */
            childId: string;
            slot: string;
            /** Format: int32 */
            orderIndex?: number;
        };
        BlockChildEntity: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            parentId: string;
            /** Format: uuid */
            childId: string;
            slot: string;
            /** Format: int32 */
            orderIndex: number;
        };
        AddChildrenBulkRequest: {
            slot: string;
            children: components["schemas"]["ChildOrderItem"][];
        };
        ChildOrderItem: {
            /** Format: uuid */
            childId: string;
            /** Format: int32 */
            orderIndex?: number;
        };
        CreateBlockRequest: {
            /** Format: uuid */
            organisationId: string;
            /** Format: uuid */
            typeId?: string;
            typeKey?: string;
            /** Format: int32 */
            typeVersion?: number;
            name?: string;
            payload: unknown;
            /** Format: uuid */
            parentId?: string;
            slot?: string;
            parentNesting?: components["schemas"]["BlockTypeNesting"];
            /** Format: int32 */
            orderIndex?: number;
        };
        MoveChildRequest: {
            toSlot: string;
            /** Format: int32 */
            toIndex: number;
        };
        ReorderChildrenRequest: {
            slot: string;
            order: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    updateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description User profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User ID in request does not match session user */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    updateMemberRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
                role: "OWNER" | "ADMIN" | "MEMBER";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganisationMember"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganisationMember"];
                };
            };
        };
    };
    updateOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Organisation"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Organisation"];
                };
            };
        };
    };
    createOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganisationCreationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Organisation"];
                };
            };
        };
    };
    getLineItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Line item retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    updateLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItem"];
            };
        };
        responses: {
            /** @description Line item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description User does not own the line item */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    deleteLineItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Line item deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the line item */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoiceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    updateInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    deleteInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete a paid or cancelled invoice */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClientById: {
        parameters: {
            query?: {
                includeMetadata?: boolean;
            };
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    updateClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Client"];
            };
        };
        responses: {
            /** @description Client updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description User does not own the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    deleteClientById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateArchiveStatusByClientId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
                status: boolean;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client archival status updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBlock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Block tree retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockTree"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockTree"];
                };
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockTree"];
                };
            };
        };
    };
    updateBlock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Block"];
            };
        };
        responses: {
            /** @description Block updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
        };
    };
    deleteBlockById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Block deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateArchiveStatusByBlockId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockId: string;
                status: boolean;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Block"];
            };
        };
        responses: {
            /** @description Block archival status updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateBlockType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockTypeId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockType"];
            };
        };
        responses: {
            /** @description Block type updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateArchiveStatusByBlockTypeId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                blockTypeId: string;
                status: boolean;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Block type archived successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsertEntityReferences: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertEntityReferencesRequest"];
            };
        };
        responses: {
            /** @description References updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data or BLOCK type in entity list */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate references when allowDuplicates=false */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    upsertBlockReference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertBlockReferenceRequest"];
            };
        };
        responses: {
            /** @description Block reference updated successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data or non-BLOCK type */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rejectInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inviteToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    inviteToOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
                email: string;
                role: "OWNER" | "ADMIN" | "MEMBER";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganisationInvite"];
                };
            };
        };
    };
    acceptInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inviteToken: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemCreationRequest"];
            };
        };
        responses: {
            /** @description Line item created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    cancelInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Cannot cancel a paid or already cancelled invoice */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    getUserInvoices: {
        parameters: {
            query: {
                organisationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invoices retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    createInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceCreationRequest"];
            };
        };
        responses: {
            /** @description Invoice created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    createClient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientCreationRequest"];
            };
        };
        responses: {
            /** @description Client created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    lintBlockType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BlockType"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LintIssue"][];
                };
            };
        };
    };
    publishBlockType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBlockTypeRequest"];
            };
        };
        responses: {
            /** @description Block type created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
        };
    };
    addChild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddChildRequest"];
            };
        };
        responses: {
            /** @description Child added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockChildEntity"];
                };
            };
            /** @description Invalid request data or validation failure */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockChildEntity"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockChildEntity"];
                };
            };
            /** @description Parent or child block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockChildEntity"];
                };
            };
            /** @description Child already belongs to another parent */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockChildEntity"];
                };
            };
        };
    };
    clearSlot: {
        parameters: {
            query: {
                slot: string;
            };
            header?: never;
            path: {
                parentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Slot cleared successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Slot parameter is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addChildrenBulk: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddChildrenBulkRequest"];
            };
        };
        responses: {
            /** @description Children added successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data or validation failure */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent or one or more child blocks not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more children already belong to another parent */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createBlock: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBlockRequest"];
            };
        };
        responses: {
            /** @description Block created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Block"];
                };
            };
        };
    };
    moveChild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parentId: string;
                childId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MoveChildRequest"];
            };
        };
        responses: {
            /** @description Child moved successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data or validation failure */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent or child block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error during move */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reorderChildren: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReorderChildrenRequest"];
            };
        };
        responses: {
            /** @description Children reordered successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request data or set mismatch */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User does not have permission to access this profile */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    deleteUserProfileById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to delete this profile */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrganisation: {
        parameters: {
            query?: {
                includeMetadata?: boolean;
            };
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Organisation"];
                };
            };
        };
    };
    deleteOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserInvites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganisationInvite"][];
                };
            };
        };
    };
    getOrganisationInvites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["OrganisationInvite"][];
                };
            };
        };
    };
    getLineItemsForOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of line items retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"][];
                };
            };
        };
    };
    generateInvoiceDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Document generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getClientInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Client"];
            };
        };
        responses: {
            /** @description List of invoices retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description User does not have access to the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    getOrganisationClients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of clients retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
            /** @description No clients found for the organisation */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
        };
    };
    getBlockTypes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Block types retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"][];
                };
            };
            /** @description No block types found for the organisation */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"][];
                };
            };
        };
    };
    getBlockTypeByKey: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Block type retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
            /** @description Block type not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BlockType"];
                };
            };
        };
    };
    getReferences: {
        parameters: {
            query?: {
                policy?: "LAZY" | "EAGER";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description References retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    clearAllReferences: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description References cleared successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeMemberFromOrganisation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganisationMember"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    revokeInvite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organisationId: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeReference: {
        parameters: {
            query?: {
                path?: string;
            };
            header?: never;
            path: {
                id: string;
                entityType: "line_item" | "client" | "company" | "invoice" | "block_tree" | "report" | "document" | "project" | "organisation" | "task";
                entityId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reference removed successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ambiguous deletion (multiple entries found, path required) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Block or reference not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeChild: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                parentId: string;
                childId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Child removed successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent or child block not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
