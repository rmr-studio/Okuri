/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's profile
         * @description Retrieves the profile of the authenticated user based on the current session.
         */
        get: operations["getCurrentUser"];
        /**
         * Update current user's profile
         * @description Updates the profile of the authenticated user based on the provided data.
         */
        put: operations["updateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/item/{lineItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a line item by ID
         * @description Retrieves a specific line item by its ID, if the user has access.
         */
        get: operations["getLineItemById"];
        /**
         * Update an existing line item
         * @description Updates a line item with the specified ID, if the user has access.
         */
        put: operations["updateLineItem"];
        post?: never;
        /**
         * Delete a line item by ID
         * @description Deletes a line item with the specified ID, if the user has access.
         */
        delete: operations["deleteLineItemById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an invoice by ID
         * @description Retrieves a specific invoice by its ID, if the user has access.
         */
        get: operations["getInvoiceById"];
        /**
         * Update an existing invoice
         * @description Updates an invoice with the specified ID, if the user has access.
         */
        put: operations["updateInvoice"];
        post?: never;
        /**
         * Delete an invoice
         * @description Deletes an invoice with the specified ID, if the user has access and the invoice is not paid or cancelled.
         */
        delete: operations["deleteInvoice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a client by ID
         * @description Retrieves a specific client by its ID, if the user has access.
         */
        get: operations["getClientById"];
        /**
         * Update an existing client
         * @description Updates a client with the specified ID, if the user has access.
         */
        put: operations["updateClient"];
        post?: never;
        /**
         * Delete a client by ID
         * @description Deletes a client with the specified ID, if the user has access.
         */
        delete: operations["deleteClientById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/item/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all line items for the authenticated user
         * @description Retrieves a list of line items associated with the current user's session.
         */
        get: operations["getLineItemsForUser"];
        put?: never;
        /**
         * Create a new line item
         * @description Creates a new line item based on the provided request data.
         */
        post: operations["createLineItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel an invoice
         * @description Cancels an invoice with the specified ID, if the user has access and the invoice is not paid or already cancelled.
         */
        post: operations["cancelInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all invoices for the authenticated user
         * @description Retrieves a list of invoices associated with the current user's session.
         */
        get: operations["getUserInvoices"];
        put?: never;
        /**
         * Create a new invoice
         * @description Creates a new invoice based on the provided request data.
         */
        post: operations["createInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all clients for the authenticated user
         * @description Retrieves a list of clients associated with the current user's session.
         */
        get: operations["getClientsForUser"];
        put?: never;
        /**
         * Create a new client
         * @description Creates a new client based on the provided request data.
         */
        post: operations["createClient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user by ID
         * @description Retrieves a specific user's profile by their ID, if the user has access.
         */
        get: operations["getUserById"];
        put?: never;
        post?: never;
        /**
         * Delete a user profile by ID
         * @description Deletes a user profile with the specified ID, if the user has access.
         */
        delete: operations["deleteUserProfileById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/{id}/document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate invoice document
         * @description Generates a PDF document for the invoice with the specified ID, if the user has access.
         */
        get: operations["generateInvoiceDocument"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/invoices/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoices for a specific client
         * @description Retrieves a list of invoices for the specified client, if the user has access.
         */
        get: operations["getClientInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Address: {
            street: string;
            city: string;
            state: string;
            postalCode: string;
            country: string;
        };
        ChargeRate: {
            /** Format: double */
            publicHolidayMultiplier: number;
            /** Format: double */
            saturdayMultiplier: number;
            /** Format: double */
            sundayMultiplier: number;
        };
        Company: {
            name: string;
            businessNumber?: string;
            taxId?: string;
            customAttributes: {
                [key: string]: Record<string, never>;
            };
        };
        Payment: {
            bsb: string;
            accountNumber: string;
            accountName: string;
        };
        User: {
            /** Format: uuid */
            id: string;
            email: string;
            name: string;
            phone: string;
            address?: components["schemas"]["Address"];
            company?: components["schemas"]["Company"];
            chargeRate?: components["schemas"]["ChargeRate"];
            paymentDetails?: components["schemas"]["Payment"];
        };
        LineItem: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: uuid */
            userId: string;
            description?: string;
            /** @enum {string} */
            type: "SERVICE" | "PRODUCT" | "FEE" | "DISCOUNT";
            chargeRate: number;
        };
        Billable: {
            /** Format: date-time */
            date: string;
            description: string;
            lineItem: components["schemas"]["LineItem"];
            /** @enum {string} */
            billableType: "HOURS" | "DISTANCE" | "QUANTITY" | "FIXED";
            quantity: number;
        };
        Client: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId: string;
            name: string;
            contactDetails?: components["schemas"]["ContactDetails"];
            template?: components["schemas"]["TemplateClientTemplateFieldStructure"];
            attributes: {
                [key: string]: Record<string, never>;
            };
        };
        ClientTemplateFieldStructure: {
            name: string;
            description?: string;
            /** @enum {string} */
            type: "TEXT" | "NUMBER" | "DATE" | "BOOLEAN" | "SELECT" | "MULTISELECT" | "OBJECT";
            required: boolean;
            children: components["schemas"]["ClientTemplateFieldStructure"][];
            constraints: components["schemas"]["Constraint"][];
            options: string[];
            defaultValue?: Record<string, never>;
        };
        Constraint: {
            /** @enum {string} */
            type: "MIN_LENGTH" | "MAX_LENGTH" | "PATTERN" | "REQUIRED" | "UNIQUE" | "CUSTOM" | "TYPE";
            value?: string;
        };
        ContactDetails: {
            email?: string;
            phone?: string;
            address?: components["schemas"]["Address"];
            additionalContacts: {
                [key: string]: string;
            };
        };
        Invoice: {
            /** Format: uuid */
            id: string;
            user: components["schemas"]["User"];
            client: components["schemas"]["Client"];
            template?: components["schemas"]["TemplateInvoiceTemplateFieldStructure"];
            reportTemplate?: components["schemas"]["TemplateReportTemplateFieldStructure"];
            invoiceNumber: string;
            items: components["schemas"]["Billable"][];
            amount: number;
            currency: {
                currencyCode?: string;
                /** Format: int32 */
                numericCode?: number;
                numericCodeAsString?: string;
                displayName?: string;
                symbol?: string;
                /** Format: int32 */
                defaultFractionDigits?: number;
            };
            /** @enum {string} */
            status: "PENDING" | "PAID" | "OVERDUE" | "OUTDATED" | "CANCELLED";
            dates: components["schemas"]["InvoiceDates"];
            customFields: {
                [key: string]: Record<string, never>;
            };
        };
        InvoiceDates: {
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            issueDate: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            invoiceCreatedAt: string;
            /** Format: date-time */
            invoiceUpdatedAt: string;
        };
        InvoiceTemplateFieldStructure: {
            name: string;
            description?: string;
            type: string;
            required: boolean;
            children: components["schemas"]["InvoiceTemplateFieldStructure"][];
        };
        ReportTemplateFieldStructure: {
            name: string;
            description?: string;
            type: string;
            required: boolean;
            children: components["schemas"]["ReportTemplateFieldStructure"][];
        };
        TemplateClientTemplateFieldStructure: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId?: string;
            name: string;
            description?: string;
            /** @enum {string} */
            type: "CLIENT" | "INVOICE" | "REPORT";
            structure: {
                [key: string]: components["schemas"]["ClientTemplateFieldStructure"];
            };
            isDefault: boolean;
            isPremade: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        TemplateInvoiceTemplateFieldStructure: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId?: string;
            name: string;
            description?: string;
            /** @enum {string} */
            type: "CLIENT" | "INVOICE" | "REPORT";
            structure: {
                [key: string]: components["schemas"]["InvoiceTemplateFieldStructure"];
            };
            isDefault: boolean;
            isPremade: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        TemplateReportTemplateFieldStructure: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            userId?: string;
            name: string;
            description?: string;
            /** @enum {string} */
            type: "CLIENT" | "INVOICE" | "REPORT";
            structure: {
                [key: string]: components["schemas"]["ReportTemplateFieldStructure"];
            };
            isDefault: boolean;
            isPremade: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        LineItemCreationRequest: {
            name: string;
            description?: string;
            chargeRate: number;
        };
        InvoiceCreationRequest: {
            client: components["schemas"]["Client"];
            template: components["schemas"]["TemplateInvoiceTemplateFieldStructure"];
            reportTemplate?: components["schemas"]["TemplateReportTemplateFieldStructure"];
            invoiceNumber: string;
            items: components["schemas"]["Billable"][];
            amount: number;
            currency: {
                currencyCode?: string;
                /** Format: int32 */
                numericCode?: number;
                numericCodeAsString?: string;
                displayName?: string;
                symbol?: string;
                /** Format: int32 */
                defaultFractionDigits?: number;
            };
            /** @enum {string} */
            status: "PENDING" | "PAID" | "OVERDUE" | "OUTDATED" | "CANCELLED";
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            issueDate: string;
            customFields: {
                [key: string]: Record<string, never>;
            };
        };
        ClientCreationRequest: {
            name: string;
            contact?: components["schemas"]["ContactDetails"];
            attributes: {
                [key: string]: Record<string, never>;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    updateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description User profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User ID in request does not match session user */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    getLineItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Line item retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    updateLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItem"];
            };
        };
        responses: {
            /** @description Line item updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description User does not own the line item */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    deleteLineItemById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lineItemId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Line item deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the line item */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Line item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getInvoiceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    updateInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    deleteInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete a paid or cancelled invoice */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getClientById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    updateClient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Client"];
            };
        };
        responses: {
            /** @description Client updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description User does not own the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    deleteClientById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Client deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not own the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getLineItemsForUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of line items retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"][];
                };
            };
            /** @description No line items found for the user */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"][];
                };
            };
        };
    };
    createLineItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LineItemCreationRequest"];
            };
        };
        responses: {
            /** @description Line item created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LineItem"];
                };
            };
        };
    };
    cancelInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description Invoice cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Cannot cancel a paid or already cancelled invoice */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    getUserInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invoices retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
        };
    };
    createInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvoiceCreationRequest"];
            };
        };
        responses: {
            /** @description Invoice created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"];
                };
            };
        };
    };
    getClientsForUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of clients retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
            /** @description No clients found for the user */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"][];
                };
            };
        };
    };
    createClient: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientCreationRequest"];
            };
        };
        responses: {
            /** @description Client created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Client"];
                };
            };
        };
    };
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User does not have permission to access this profile */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["User"];
                };
            };
        };
    };
    deleteUserProfileById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User does not have permission to delete this profile */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    generateInvoiceDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Document generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description User does not own the invoice */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getClientInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Client"];
            };
        };
        responses: {
            /** @description List of invoices retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description Unauthorized access */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
            /** @description User does not have access to the client */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Invoice"][];
                };
            };
        };
    };
}
