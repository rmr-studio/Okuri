import { LineItem } from "@/lib/interfaces/invoice.interface";
import { fromError, isResponseError } from "@/lib/util/error/error.util";
import { api, isUUID } from "@/lib/util/utils";
import { Session } from "@supabase/supabase-js";

export const fetchUserLineItems = async (
    session: Session | null
): Promise<LineItem[]> => {
    try {
        if (!session?.access_token) {
            throw fromError({
                message: "No active session found",
                status: 401,
                error: "NO_SESSION",
            });
        }
        const url = api();
        const response = await fetch(`${url}/v1/item/`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${session.access_token}`,
            },
        });
        if (response.ok) {
            return await response.json();
        }
        let errorData;
        try {
            errorData = await response.json();
        } catch {
            errorData = {
                message: `Failed to fetch line items: ${response.status} ${response.statusText}`,
                status: response.status,
                error: "SERVER_ERROR",
            };
        }
        throw fromError(errorData);
    } catch (error) {
        if (isResponseError(error)) throw error;
        throw fromError(error);
    }
};

export const createLineItem = async (
    session: Session | null,
    lineItem: Omit<LineItem, "id"> // id is generated by backend
): Promise<LineItem> => {
    try {
        if (!session?.access_token) {
            throw fromError({
                message: "No active session found",
                status: 401,
                error: "NO_SESSION",
            });
        }
        const url = api();
        const response = await fetch(`${url}/v1/item/`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${session.access_token}`,
            },
            body: JSON.stringify(lineItem),
        });
        if (response.ok) {
            return await response.json();
        }
        let errorData;
        try {
            errorData = await response.json();
        } catch {
            errorData = {
                message: `Failed to create line item: ${response.status} ${response.statusText}`,
                status: response.status,
                error: "SERVER_ERROR",
            };
        }
        throw fromError(errorData);
    } catch (error) {
        if (isResponseError(error)) throw error;
        throw fromError(error);
    }
};

export const updateLineItem = async (
    session: Session | null,
    lineItem: LineItem
): Promise<LineItem> => {
    try {
        if (!session?.access_token) {
            throw fromError({
                message: "No active session found",
                status: 401,
                error: "NO_SESSION",
            });
        }
        const url = api();
        const response = await fetch(`${url}/v1/item/${lineItem.id}`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${session.access_token}`,
            },
            body: JSON.stringify(lineItem),
        });
        if (response.ok) {
            return await response.json();
        }
        let errorData;
        try {
            errorData = await response.json();
        } catch {
            errorData = {
                message: `Failed to update line item: ${response.status} ${response.statusText}`,
                status: response.status,
                error: "SERVER_ERROR",
            };
        }
        throw fromError(errorData);
    } catch (error) {
        if (isResponseError(error)) throw error;
        throw fromError(error);
    }
};

export const getLineItemById = async (
    session: Session | null,
    id: string
): Promise<LineItem> => {
    try {
        if (!isUUID(id)) {
            throw fromError({
                message: "Invalid line item ID format. Expected a UUID.",
                status: 400,
                error: "INVALID_ID",
            });
        }
        if (!session?.access_token) {
            throw fromError({
                message: "No active session found",
                status: 401,
                error: "NO_SESSION",
            });
        }
        const url = api();
        const response = await fetch(`${url}/v1/item/${id}`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${session.access_token}`,
            },
        });
        if (response.ok) {
            return await response.json();
        }
        let errorData;
        try {
            errorData = await response.json();
        } catch {
            errorData = {
                message: `Failed to fetch line item: ${response.status} ${response.statusText}`,
                status: response.status,
                error: "SERVER_ERROR",
            };
        }
        throw fromError(errorData);
    } catch (error) {
        throw fromError(error);
    }
};
